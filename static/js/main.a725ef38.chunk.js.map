{"version":3,"sources":["sortingAlgorithms/mergeSort.js","SortingVisualiser/SortingVisualiser.js","sortingAlgorithms/bubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","copy","slice","mergeSortHelper","start","end","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualiser","props","state","this","resetArray","min","max","numBars","window","innerWidth","maxBarHeight","innerHeight","random","setState","arrayBars","document","getElementsByClassName","bar1","bar2","bar1style","style","bar2style","color","setTimeout","backgroundColor","newHeight","height","temp","bubbleSortHelper","getBubbleSortAnimations","className","map","value","idx","key","display","onClick","mergeSort","quickSort","heapSort","bubbleSort","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a725ef38.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const copy = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, copy, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(array, start, end, copy, animations) {\r\n    if (start === end) return;\r\n    const middleIdx = Math.floor((start + end) / 2);\r\n    mergeSortHelper(copy, start, middleIdx, array, animations);\r\n    mergeSortHelper(copy, middleIdx + 1, end, array, animations);\r\n    doMerge(array, start, middleIdx, end, copy, animations);\r\n}\r\n\r\nfunction doMerge(array, start, middleIdx, end, copy, animations) {\r\n    let k = start;\r\n    let i = start;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= end) {\r\n        // Change the colour of the bars we are checking\r\n        animations.push([i, j]);\r\n        // Change the colours back after checking\r\n        animations.push([i, j]);\r\n\r\n        if (copy[i] <= copy[j]) {\r\n            animations.push([k, copy[i]]);\r\n            array[k++] = copy[i++];\r\n        } else {\r\n            animations.push([k, copy[j]]);\r\n            array[k++] = copy[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // Change the colour of the bars we are checking\r\n        animations.push([i, i]);\r\n        // Change the colours back after checking\r\n        animations.push([i, i]);\r\n\r\n        animations.push([k, copy[i]]);\r\n        array[k++] = copy[i++];\r\n    }\r\n    while (j <= end) {\r\n        // Change the colour of the bars we are checking\r\n        animations.push([j, j]);\r\n        // Change the colours back after checking\r\n        animations.push([j, j]);\r\n\r\n        animations.push([k, copy[j]]);\r\n        array[k++] = copy[j++];\r\n    }\r\n}","import React from 'react';\r\nimport './SortingVisualiser.css';\r\nimport {getMergeSortAnimations} from \"../sortingAlgorithms/mergeSort\";\r\nimport {getBubbleSortAnimations} from \"../sortingAlgorithms/bubbleSort\";\r\nimport {getQuickSortAnimations} from \"../sortingAlgorithms/quickSort\";\r\n\r\n// Constants used\r\nconst ANIMATION_SPEED_MS = 1;\r\nconst PRIMARY_COLOR = '#ff59ac';\r\nconst SECONDARY_COLOR = 'blue';\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n\r\n        // Determine amount of bars to create\r\n        const width = window.innerWidth;\r\n        const container_width = width - 100;\r\n        const numBars = container_width / 4;\r\n\r\n        // Determine how tall to make the bars\r\n        const height = window.innerHeight;\r\n        const maxBarHeight = (height - 200)\r\n\r\n        for (let i = 0; i < numBars; i++) {\r\n            array.push(randomIntFromInterval(5, maxBarHeight));\r\n        }\r\n        this.setState({array},);\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const colorChange = i % 3 !== 2;\r\n            if (colorChange) {\r\n                const [bar1, bar2] = animations[i];\r\n                const bar1style = arrayBars[bar1].style;\r\n                const bar2style = arrayBars[bar2].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    bar1style.backgroundColor = color;\r\n                    bar2style.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [bar1, newHeight] = animations[i];\r\n                    const bar1style = arrayBars[bar1].style;\r\n                    bar1style.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n\r\n    }\r\n\r\n    heapSort() {\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const colorChange = (i % 4 === 0 || i % 4 === 1);\r\n            if (colorChange) {\r\n                const [bar1, bar2] = animations[i];\r\n                const bar1style = arrayBars[bar1].style;\r\n                const bar2style = arrayBars[bar2].style;\r\n                const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    bar1style.backgroundColor = color;\r\n                    bar2style.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [bar1, newHeight] = animations[i];\r\n                    if(bar1 !== -1) {\r\n                        const bar1style = arrayBars[bar1].style;\r\n                        bar1style.height = `${newHeight}px`;\r\n                    }\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state\r\n\r\n        return (\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div\r\n                        className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{height: `${value}px`}}/>\r\n                ))}\r\n                <div style={{display: \"block\"}}>\r\n                    <button onClick={() => this.resetArray()}>Generate New Array!</button>\r\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n                    <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n                    <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Returns a random integer between the given interval.\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    bubbleSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations) {\r\n    for(let i = 0; i < array.length - 1; i++) {\r\n        for(let j = 0; j < array.length - i - 1; j++) {\r\n            // Change the colour of the bars we are checking\r\n            animations.push([j, j + 1]);\r\n            // Change the colours back after checking\r\n            animations.push([j, j + 1]);\r\n\r\n            if(array[j] > array[j + 1]) {\r\n                animations.push([j, array[j + 1]]);\r\n                animations.push([j + 1, array[j]]);\r\n                const temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n            } else {\r\n                animations.push([-1, -1]);\r\n                animations.push([-1, -1]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport SortingVisualiser from './SortingVisualiser/SortingVisualiser'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <header>\n            <h1 className=\"title\">SORTING VISUALISER</h1>\n        </header>\n        <SortingVisualiser></SortingVisualiser>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}